{"changed":true,"filter":false,"title":"byotest.py","tooltip":"/byotest.py","value":"def number_of_evens(numbers):\n    return 0\n    \ndef test_are_equal(actual, expected):\n    \"\"\"\n    Test that two values are equal. Raises AssertionError if both values are\n    not equal.\n    `actual` is the actual value produced\n    `expected` is the value that was supposed to be produced\n    \"\"\"\n    assert expected == actual, \"Expected {0}, got {1}\".format(expected, actual)\n\n\ndef test_not_equal(a, b):\n    \"\"\"\n    Test that two values are not equal. Raises AssertionError if both values\n    are not equal.\n    `a` is the actual value produced\n    `b` is the value that was supposed to be produced\n    \"\"\"\n    assert a != b, \"{0} is equal to {1}\".format(a, b)\n\n\ndef test_is_in(collection, item):\n    \"\"\"\n    Check to ensure that a given collection contains a given value. Raises\n    AssertionError if `item` is not in `collection`\n    `collection` is the collection to be tested\n    `item` is the item that is being searched for\n    \"\"\"\n    assert item in collection, \"{0} does not contain {1}\".format(collection, item)\n\n\ndef test_not_in(collection, item):\n    \"\"\"\n    Check to ensure that a given collection does not contain a given value.\n    Raises AssertionError if the `item` is found in `collection`\n    `collection` is the collection in question\n    `item` is the thing that we want to check for\n    \"\"\"\n    assert item not in collection, \"{0} is in {1}\".format(\n        item, collection)\n\n\ndef test_between(upper_limit, lower_limit, actual):\n    \"\"\"\n    Check to ensure that a number is between two other numbers. Raises\n    AssertionError if the number is not between the other two numbers\n    \"\"\"\n    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)\n\n\n# Test to fail the `test_are_equal` function\n# test_are_equal(number_of_evens([1,2,3,4,5]), 2)\n\n# Test to fail the `test_not_equal` function\n# test_not_equal(0, 0)\n\n# Test to fail the `test_is_in` function\n#test_is_in([1], 2)\n\n# Test to fail the `test_not_in` function\n# test_not_in([1], 1)\n\n# Test to fail the `test_between` function\n# test_between(10, 1, 200)","undoManager":{"mark":21,"position":27,"stack":[[{"start":{"row":0,"column":0},"end":{"row":37,"column":20},"action":"insert","lines":["def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are not equal.","    `a` is the actual value produced","    `b` is the value that was supposed to be produced","    \"\"\"","    assert a != b, \"{0} is equal to {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(collection, item)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)"],"id":1}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"remove","lines":[" "],"id":2}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":1},"action":"insert","lines":[" "],"id":3}],[{"start":{"row":31,"column":1},"end":{"row":31,"column":2},"action":"remove","lines":[" "],"id":7}],[{"start":{"row":31,"column":0},"end":{"row":31,"column":1},"action":"remove","lines":["#"],"id":8}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["d"],"id":12},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["e"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["f"]}],[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":[" "],"id":13}],[{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["n"],"id":14},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["u"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["m"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["b"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["e"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["r"]}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["_"],"id":15},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["o"]},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["f"]}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["_"],"id":16},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["e"]},{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["v"]},{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["e"]},{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["n"]},{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":["s"]}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["("],"id":17},{"start":{"row":0,"column":20},"end":{"row":0,"column":21},"action":"insert","lines":["n"]},{"start":{"row":0,"column":21},"end":{"row":0,"column":22},"action":"insert","lines":["u"]},{"start":{"row":0,"column":22},"end":{"row":0,"column":23},"action":"insert","lines":["m"]},{"start":{"row":0,"column":23},"end":{"row":0,"column":24},"action":"insert","lines":["b"]},{"start":{"row":0,"column":24},"end":{"row":0,"column":25},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":25},"end":{"row":0,"column":26},"action":"insert","lines":["r"],"id":18},{"start":{"row":0,"column":26},"end":{"row":0,"column":27},"action":"insert","lines":["s"]},{"start":{"row":0,"column":27},"end":{"row":0,"column":28},"action":"insert","lines":[")"]}],[{"start":{"row":0,"column":28},"end":{"row":0,"column":29},"action":"insert","lines":[":"],"id":19}],[{"start":{"row":0,"column":29},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":20},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1,"column":4},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":21},{"start":{"row":2,"column":0},"end":{"row":2,"column":4},"action":"insert","lines":["    "]},{"start":{"row":2,"column":4},"end":{"row":3,"column":0},"action":"insert","lines":["",""]},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"remove","lines":["    "],"id":22}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["r"],"id":23},{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["e"]},{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["t"]},{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":["u"]},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["r"]},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":[" "],"id":24},{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":["0"]}],[{"start":{"row":33,"column":0},"end":{"row":40,"column":20},"action":"remove","lines":["# Test to fail the `test_are_equal` function","test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)"],"id":26},{"start":{"row":33,"column":0},"end":{"row":65,"column":26},"action":"insert","lines":["def test_not_in(collection, item):","    \"\"\"","    Check to ensure that a given collection does not contain a given value.","    Raises AssertionError if the `item` is found in `collection`","    `collection` is the collection in question","    `item` is the thing that we want to check for","    \"\"\"","    assert item not in collection, \"{0} is in {1}\".format(","        item, collection)","","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)","","# Test to fail the `test_not_in` function","# test_not_in([1], 1)","","# Test to fail the `test_between` function","# test_between(10, 1, 200)"]}],[{"start":{"row":59,"column":1},"end":{"row":59,"column":2},"action":"remove","lines":[" "],"id":27},{"start":{"row":59,"column":0},"end":{"row":59,"column":1},"action":"remove","lines":["#"]}],[{"start":{"row":59,"column":0},"end":{"row":59,"column":1},"action":"insert","lines":["#"],"id":28}],[{"start":{"row":65,"column":1},"end":{"row":65,"column":2},"action":"remove","lines":[" "],"id":29},{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"remove","lines":["#"]}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"insert","lines":["~"],"id":30}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"remove","lines":["~"],"id":31}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"insert","lines":["~"],"id":32}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"remove","lines":["~"],"id":33}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":1},"action":"insert","lines":["#"],"id":34}],[{"start":{"row":65,"column":1},"end":{"row":65,"column":2},"action":"insert","lines":[" "],"id":35}]]},"ace":{"folds":[],"scrolltop":525,"scrollleft":0,"selection":{"start":{"row":65,"column":2},"end":{"row":65,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":35,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1565691727457}